{"ast":null,"code":"import { LoginActionType } from \"../../types/loginType\";\nimport { resettableReducer } from \"../store/store\";\nimport { getMe } from \"./meAction\";\nconst getLoginRequest = () => ({\n  type: LoginActionType.LOGIN_REQUEST,\n  loading: true,\n  error: null\n});\nconst getLoginSuccess = payload => ({\n  type: LoginActionType.LOGIN_SUCCESS,\n  payload: payload,\n  loading: false,\n  error: null\n});\nconst getLoginFailure = error => ({\n  type: LoginActionType.LOGIN_FAILURE,\n  loading: false,\n  error: error\n});\nconst getLogoutRequest = () => ({\n  type: LoginActionType.LOGOUT_REQUEST,\n  loading: true,\n  error: null\n});\nconst getLogoutSuccess = () => ({\n  type: LoginActionType.LOGOUT_SUCCESS,\n  loading: false,\n  error: null\n});\nconst getLogoutFailure = error => ({\n  type: LoginActionType.LOGOUT_FAILURE,\n  loading: false,\n  error: error\n});\nconst loginFetch = (username, password) => {\n  return (dispatch, getState) => {\n    dispatch(getLoginRequest());\n    fetch(\"http://localhost:8080/api/auth/login\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        username,\n        password\n      })\n    }).then(response => {\n      if (response.ok) {\n        return response.json();\n      } else {\n        throw new Error(\"Failed to login\");\n      }\n    }).then(data => {\n      dispatch(getLoginSuccess(data));\n      getMe(data.username);\n      //console.log(data);\n    }).catch(error => {\n      dispatch(getLoginFailure(error.message));\n    });\n  };\n};\nexport default loginFetch;\nexport const logoutFetch = (state, action) => {\n  return async dispatch => {\n    dispatch(getLogoutRequest());\n    try {\n      const response = await fetch(\"http://localhost:8080/api/auth/logout\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      if (response.ok) {\n        dispatch(getLogoutSuccess());\n        resettableReducer(state, action);\n      } else {\n        throw new Error(\"Failed to logout\");\n      }\n    } catch (error) {\n      if (error instanceof Error) {\n        dispatch(getLogoutFailure(error.message));\n      } else {\n        dispatch(getLogoutFailure(\"An unknown error occurred during logout.\"));\n      }\n    }\n  };\n};","map":{"version":3,"names":["LoginActionType","resettableReducer","getMe","getLoginRequest","type","LOGIN_REQUEST","loading","error","getLoginSuccess","payload","LOGIN_SUCCESS","getLoginFailure","LOGIN_FAILURE","getLogoutRequest","LOGOUT_REQUEST","getLogoutSuccess","LOGOUT_SUCCESS","getLogoutFailure","LOGOUT_FAILURE","loginFetch","username","password","dispatch","getState","fetch","method","headers","body","JSON","stringify","then","response","ok","json","Error","data","catch","message","logoutFetch","state","action"],"sources":["C:/Users/sarac/OneDrive/Desktop/Capstone Project/maze/src/redux/actions/loginAction.ts"],"sourcesContent":["import { LoginActionType, LoginAction, Session } from \"../../types/loginType\";\r\nimport { RootState, resettableReducer } from \"../store/store\";\r\nimport { getMe } from \"./meAction\";\r\nimport { AnyAction, Dispatch } from \"@reduxjs/toolkit\";\r\n\r\nconst getLoginRequest = (): LoginAction => ({\r\n  type: LoginActionType.LOGIN_REQUEST,\r\n  loading: true,\r\n  error: null,\r\n});\r\n\r\nconst getLoginSuccess = (payload: Session): LoginAction => ({\r\n  type: LoginActionType.LOGIN_SUCCESS,\r\n  payload: payload,\r\n  loading: false,\r\n  error: null,\r\n});\r\n\r\nconst getLoginFailure = (error: string): LoginAction => ({\r\n  type: LoginActionType.LOGIN_FAILURE,\r\n  loading: false,\r\n  error: error,\r\n});\r\n\r\nconst getLogoutRequest = (): LoginAction => ({\r\n  type: LoginActionType.LOGOUT_REQUEST,\r\n  loading: true,\r\n  error: null,\r\n});\r\n\r\nconst getLogoutSuccess = (): LoginAction => ({\r\n  type: LoginActionType.LOGOUT_SUCCESS,\r\n  loading: false,\r\n  error: null,\r\n});\r\n\r\nconst getLogoutFailure = (error: string): LogoutAction => ({\r\n  type: LoginActionType.LOGOUT_FAILURE,\r\n  loading: false,\r\n  error: error,\r\n});\r\n\r\nconst loginFetch = (username: string, password: string): any => {\r\n  return (dispatch: Dispatch<LoginAction>, getState: () => RootState) => {\r\n    dispatch(getLoginRequest());\r\n    fetch(\"http://localhost:8080/api/auth/login\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({ username, password }),\r\n    })\r\n      .then((response) => {\r\n        if (response.ok) {\r\n          return response.json();\r\n        } else {\r\n          throw new Error(\"Failed to login\");\r\n        }\r\n      })\r\n      .then((data) => {\r\n        dispatch(getLoginSuccess(data));\r\n        getMe(data.username);\r\n        //console.log(data);\r\n      })\r\n      .catch((error) => {\r\n        dispatch(getLoginFailure(error.message));\r\n      });\r\n  };\r\n};\r\n\r\nexport default loginFetch;\r\n\r\nexport const logoutFetch = (state: any, action: any) => {\r\n  return async (dispatch: Dispatch<AnyAction>) => {\r\n    dispatch(getLogoutRequest());\r\n    try {\r\n      const response = await fetch(\"http://localhost:8080/api/auth/logout\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      });\r\n      if (response.ok) {\r\n        dispatch(getLogoutSuccess());\r\n        resettableReducer(state, action);\r\n      } else {\r\n        throw new Error(\"Failed to logout\");\r\n      }\r\n    } catch (error: unknown | Error) {\r\n      if (error instanceof Error) {\r\n        dispatch(getLogoutFailure(error.message));\r\n      } else {\r\n        dispatch(getLogoutFailure(\"An unknown error occurred during logout.\"));\r\n      }\r\n    }\r\n  };\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}