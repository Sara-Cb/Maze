{"ast":null,"code":"import { LogoutActionType } from \"../../types/logoutType\";\nimport { resetStoreAction } from \"../store/store\";\nconst getLogoutRequest = () => ({\n  type: LogoutActionType.LOGOUT_REQUEST,\n  loading: true,\n  error: null\n});\nconst getLogoutSuccess = () => ({\n  type: LogoutActionType.LOGOUT_SUCCESS,\n  loading: false,\n  error: null\n});\nconst getLogoutFailure = error => ({\n  type: LogoutActionType.LOGOUT_FAILURE,\n  loading: false,\n  error: error\n});\nconst logoutFetch = () => {\n  return async dispatch => {\n    dispatch(getLogoutRequest());\n    try {\n      const response = await fetch(\"http://localhost:8080/api/auth/logout\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      if (response.ok) {\n        dispatch(getLogoutSuccess());\n        dispatch(resetStoreAction);\n      } else {\n        throw new Error(\"Failed to logout\");\n      }\n    } catch (error) {\n      if (error instanceof Error) {\n        dispatch(getLogoutFailure(error.message));\n      } else {\n        dispatch(getLogoutFailure(\"An unknown error occurred during logout.\"));\n      }\n    }\n  };\n};\nexport default logoutFetch;","map":{"version":3,"names":["LogoutActionType","resetStoreAction","getLogoutRequest","type","LOGOUT_REQUEST","loading","error","getLogoutSuccess","LOGOUT_SUCCESS","getLogoutFailure","LOGOUT_FAILURE","logoutFetch","dispatch","response","fetch","method","headers","ok","Error","message"],"sources":["C:/Users/sarac/OneDrive/Desktop/Capstone Project/maze/src/redux/actions/logoutAction.ts"],"sourcesContent":["import { LogoutActionType, LogoutAction } from \"../../types/logoutType\";\r\nimport { AnyAction, Dispatch } from \"@reduxjs/toolkit\";\r\nimport { resetStoreAction } from \"../store/store\";\r\n\r\nconst getLogoutRequest = (): LogoutAction => ({\r\n  type: LogoutActionType.LOGOUT_REQUEST,\r\n  loading: true,\r\n  error: null,\r\n});\r\n\r\nconst getLogoutSuccess = (): LogoutAction => ({\r\n  type: LogoutActionType.LOGOUT_SUCCESS,\r\n  loading: false,\r\n  error: null,\r\n});\r\n\r\nconst getLogoutFailure = (error: string): LogoutAction => ({\r\n  type: LogoutActionType.LOGOUT_FAILURE,\r\n  loading: false,\r\n  error: error,\r\n});\r\n\r\nconst logoutFetch = () => {\r\n  return async (dispatch: Dispatch<AnyAction>) => {\r\n    dispatch(getLogoutRequest());\r\n    try {\r\n      const response = await fetch(\"http://localhost:8080/api/auth/logout\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      });\r\n      if (response.ok) {\r\n        dispatch(getLogoutSuccess());\r\n        dispatch(resetStoreAction);\r\n      } else {\r\n        throw new Error(\"Failed to logout\");\r\n      }\r\n    } catch (error: unknown | Error) {\r\n      if (error instanceof Error) {\r\n        dispatch(getLogoutFailure(error.message));\r\n      } else {\r\n        dispatch(getLogoutFailure(\"An unknown error occurred during logout.\"));\r\n      }\r\n    }\r\n  };\r\n};\r\n\r\nexport default logoutFetch;\r\n"],"mappings":"AAAA,SAASA,gBAAgB,QAAsB,wBAAwB;AAEvE,SAASC,gBAAgB,QAAQ,gBAAgB;AAEjD,MAAMC,gBAAgB,GAAGA,CAAA,MAAqB;EAC5CC,IAAI,EAAEH,gBAAgB,CAACI,cAAc;EACrCC,OAAO,EAAE,IAAI;EACbC,KAAK,EAAE;AACT,CAAC,CAAC;AAEF,MAAMC,gBAAgB,GAAGA,CAAA,MAAqB;EAC5CJ,IAAI,EAAEH,gBAAgB,CAACQ,cAAc;EACrCH,OAAO,EAAE,KAAK;EACdC,KAAK,EAAE;AACT,CAAC,CAAC;AAEF,MAAMG,gBAAgB,GAAIH,KAAa,KAAoB;EACzDH,IAAI,EAAEH,gBAAgB,CAACU,cAAc;EACrCL,OAAO,EAAE,KAAK;EACdC,KAAK,EAAEA;AACT,CAAC,CAAC;AAEF,MAAMK,WAAW,GAAGA,CAAA,KAAM;EACxB,OAAO,MAAOC,QAA6B,IAAK;IAC9CA,QAAQ,CAACV,gBAAgB,CAAC,CAAC,CAAC;IAC5B,IAAI;MACF,MAAMW,QAAQ,GAAG,MAAMC,KAAK,CAAC,uCAAuC,EAAE;QACpEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB;MACF,CAAC,CAAC;MACF,IAAIH,QAAQ,CAACI,EAAE,EAAE;QACfL,QAAQ,CAACL,gBAAgB,CAAC,CAAC,CAAC;QAC5BK,QAAQ,CAACX,gBAAgB,CAAC;MAC5B,CAAC,MAAM;QACL,MAAM,IAAIiB,KAAK,CAAC,kBAAkB,CAAC;MACrC;IACF,CAAC,CAAC,OAAOZ,KAAsB,EAAE;MAC/B,IAAIA,KAAK,YAAYY,KAAK,EAAE;QAC1BN,QAAQ,CAACH,gBAAgB,CAACH,KAAK,CAACa,OAAO,CAAC,CAAC;MAC3C,CAAC,MAAM;QACLP,QAAQ,CAACH,gBAAgB,CAAC,0CAA0C,CAAC,CAAC;MACxE;IACF;EACF,CAAC;AACH,CAAC;AAED,eAAeE,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}