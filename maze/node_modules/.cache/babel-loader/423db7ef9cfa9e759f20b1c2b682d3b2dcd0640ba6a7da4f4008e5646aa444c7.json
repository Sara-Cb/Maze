{"ast":null,"code":"import { combineReducers } from \"redux\";\n//import loginReducer from \"../reducers/loginReducer\";\n//import zenyteReducer from \"../reducers/zenyteReducer\";\nimport { persistStore, persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\n//import profileReducer from \"../reducers/profileReducer\";\n//import blogReducer from \"../reducers/blogReducer\";\n//import articleReducer from \"../reducers/articleReducer\";\n//import registerReducer from \"../reducers/registerReducer\";\nimport { configureStore } from \"@reduxjs/toolkit\";\nconst rootReducer = combineReducers({\n  //login: loginReducer,\n  //myZenyte: zenyteReducer,\n  //selectedZenyte: zenyteReducer,\n  //profile: profileReducer,\n  //blog: blogReducer,\n  //article: articleReducer,\n  //register: registerReducer,\n});\nconst RESET_STORE = \"RESET_STORE\";\nexport const resetStoreAction = {\n  type: RESET_STORE\n};\nconst resettableReducer = (state, action) => {\n  if (action.type === RESET_STORE) {\n    state = undefined;\n  }\n  return rootReducer(state, action);\n};\nconst persistConfig = {\n  key: \"root\",\n  storage\n  // Puoi specificare qui il whitelist o il blacklist dei reducer\n};\n\nconst persistedReducer = persistReducer(persistConfig, resettableReducer);\nexport const store = configureStore({\n  reducer: persistedReducer\n});\nexport const persistor = persistStore(store);","map":{"version":3,"names":["combineReducers","persistStore","persistReducer","storage","configureStore","rootReducer","RESET_STORE","resetStoreAction","type","resettableReducer","state","action","undefined","persistConfig","key","persistedReducer","store","reducer","persistor"],"sources":["C:/Users/sarac/OneDrive/Desktop/Capstone Project/maze/src/store/store.ts"],"sourcesContent":["import { CombinedState, combineReducers } from \"redux\";\r\n//import loginReducer from \"../reducers/loginReducer\";\r\n//import zenyteReducer from \"../reducers/zenyteReducer\";\r\nimport { persistStore, persistReducer } from \"redux-persist\";\r\nimport storage from \"redux-persist/lib/storage\";\r\n//import profileReducer from \"../reducers/profileReducer\";\r\n//import blogReducer from \"../reducers/blogReducer\";\r\n//import articleReducer from \"../reducers/articleReducer\";\r\n//import registerReducer from \"../reducers/registerReducer\";\r\nimport { configureStore } from \"@reduxjs/toolkit\";\r\n\r\nconst rootReducer = combineReducers({\r\n  //login: loginReducer,\r\n  //myZenyte: zenyteReducer,\r\n  //selectedZenyte: zenyteReducer,\r\n  //profile: profileReducer,\r\n  //blog: blogReducer,\r\n  //article: articleReducer,\r\n  //register: registerReducer,\r\n});\r\n\r\nconst RESET_STORE = \"RESET_STORE\";\r\n\r\nexport const resetStoreAction = { type: RESET_STORE };\r\n\r\nconst resettableReducer = (state: any, action: any) => {\r\n  if (action.type === RESET_STORE) {\r\n    state = undefined;\r\n  }\r\n  return rootReducer(state, action);\r\n};\r\n\r\nconst persistConfig = {\r\n  key: \"root\",\r\n  storage,\r\n  // Puoi specificare qui il whitelist o il blacklist dei reducer\r\n};\r\n\r\nconst persistedReducer = persistReducer(persistConfig, resettableReducer);\r\n\r\nexport const store = configureStore({\r\n  reducer: persistedReducer,\r\n});\r\n\r\nexport const persistor = persistStore(store);\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\n"],"mappings":"AAAA,SAAwBA,eAAe,QAAQ,OAAO;AACtD;AACA;AACA,SAASC,YAAY,EAAEC,cAAc,QAAQ,eAAe;AAC5D,OAAOC,OAAO,MAAM,2BAA2B;AAC/C;AACA;AACA;AACA;AACA,SAASC,cAAc,QAAQ,kBAAkB;AAEjD,MAAMC,WAAW,GAAGL,eAAe,CAAC;EAClC;EACA;EACA;EACA;EACA;EACA;EACA;AAAA,CACD,CAAC;AAEF,MAAMM,WAAW,GAAG,aAAa;AAEjC,OAAO,MAAMC,gBAAgB,GAAG;EAAEC,IAAI,EAAEF;AAAY,CAAC;AAErD,MAAMG,iBAAiB,GAAGA,CAACC,KAAU,EAAEC,MAAW,KAAK;EACrD,IAAIA,MAAM,CAACH,IAAI,KAAKF,WAAW,EAAE;IAC/BI,KAAK,GAAGE,SAAS;EACnB;EACA,OAAOP,WAAW,CAACK,KAAK,EAAEC,MAAM,CAAC;AACnC,CAAC;AAED,MAAME,aAAa,GAAG;EACpBC,GAAG,EAAE,MAAM;EACXX;EACA;AACF,CAAC;;AAED,MAAMY,gBAAgB,GAAGb,cAAc,CAACW,aAAa,EAAEJ,iBAAiB,CAAC;AAEzE,OAAO,MAAMO,KAAK,GAAGZ,cAAc,CAAC;EAClCa,OAAO,EAAEF;AACX,CAAC,CAAC;AAEF,OAAO,MAAMG,SAAS,GAAGjB,YAAY,CAACe,KAAK,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}