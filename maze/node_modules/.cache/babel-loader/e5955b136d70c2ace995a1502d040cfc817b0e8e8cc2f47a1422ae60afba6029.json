{"ast":null,"code":"import { LoginActionType } from \"../types/loginType\";\nconst getLoginRequest = () => ({\n  type: LoginActionType.LOGIN_REQUEST,\n  loading: true,\n  error: null\n});\nconst getLoginSuccess = payload => ({\n  type: LoginActionType.LOGIN_SUCCESS,\n  payload: payload,\n  loading: false,\n  error: null\n});\nconst getLoginFailure = error => ({\n  type: LoginActionType.LOGIN_FAILURE,\n  loading: false,\n  error: error\n});\nconst loginFetch = (username, password) => {\n  return (dispatch, getState) => {\n    dispatch(getLoginRequest());\n    fetch(\"http://localhost:8080/api/auth/login\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        username,\n        password\n      })\n    }).then(response => {\n      if (response.ok) {\n        return response.json();\n      } else {\n        throw new Error(\"Failed to login\");\n      }\n    }).then(data => {\n      dispatch(getLoginSuccess(data));\n    }).catch(error => {\n      dispatch(getLoginFailure(error.message));\n    });\n  };\n};\nexport default loginFetch;","map":{"version":3,"names":["LoginActionType","getLoginRequest","type","LOGIN_REQUEST","loading","error","getLoginSuccess","payload","LOGIN_SUCCESS","getLoginFailure","LOGIN_FAILURE","loginFetch","username","password","dispatch","getState","fetch","method","headers","body","JSON","stringify","then","response","ok","json","Error","data","catch","message"],"sources":["C:/Users/sarac/OneDrive/Desktop/Capstone Project/maze/src/actions/loginAction.ts"],"sourcesContent":["import { LoginActionType, LoginAction, Session } from \"../types/loginType\";\r\nimport { Dispatch } from \"redux\";\r\nimport { RootState } from \"../store/store\";\r\n\r\nconst getLoginRequest = (): LoginAction => ({\r\n  type: LoginActionType.LOGIN_REQUEST,\r\n  loading: true,\r\n  error: null,\r\n});\r\n\r\nconst getLoginSuccess = (payload: Session): LoginAction => ({\r\n  type: LoginActionType.LOGIN_SUCCESS,\r\n  payload: payload,\r\n  loading: false,\r\n  error: null,\r\n});\r\n\r\nconst getLoginFailure = (error: string): LoginAction => ({\r\n  type: LoginActionType.LOGIN_FAILURE,\r\n  loading: false,\r\n  error: error,\r\n});\r\n\r\nconst loginFetch = (username: string, password: string) => {\r\n  return (dispatch: Dispatch<LoginAction>, getState: () => RootState) => {\r\n    dispatch(getLoginRequest());\r\n    fetch(\"http://localhost:8080/api/auth/login\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({ username, password }),\r\n    })\r\n      .then((response) => {\r\n        if (response.ok) {\r\n          return response.json();\r\n        } else {\r\n          throw new Error(\"Failed to login\");\r\n        }\r\n      })\r\n      .then((data) => {\r\n        dispatch(getLoginSuccess(data));\r\n      })\r\n      .catch((error) => {\r\n        dispatch(getLoginFailure(error.message));\r\n      });\r\n  };\r\n};\r\n\r\nexport default loginFetch;\r\n"],"mappings":"AAAA,SAASA,eAAe,QAA8B,oBAAoB;AAI1E,MAAMC,eAAe,GAAGA,CAAA,MAAoB;EAC1CC,IAAI,EAAEF,eAAe,CAACG,aAAa;EACnCC,OAAO,EAAE,IAAI;EACbC,KAAK,EAAE;AACT,CAAC,CAAC;AAEF,MAAMC,eAAe,GAAIC,OAAgB,KAAmB;EAC1DL,IAAI,EAAEF,eAAe,CAACQ,aAAa;EACnCD,OAAO,EAAEA,OAAO;EAChBH,OAAO,EAAE,KAAK;EACdC,KAAK,EAAE;AACT,CAAC,CAAC;AAEF,MAAMI,eAAe,GAAIJ,KAAa,KAAmB;EACvDH,IAAI,EAAEF,eAAe,CAACU,aAAa;EACnCN,OAAO,EAAE,KAAK;EACdC,KAAK,EAAEA;AACT,CAAC,CAAC;AAEF,MAAMM,UAAU,GAAGA,CAACC,QAAgB,EAAEC,QAAgB,KAAK;EACzD,OAAO,CAACC,QAA+B,EAAEC,QAAyB,KAAK;IACrED,QAAQ,CAACb,eAAe,CAAC,CAAC,CAAC;IAC3Be,KAAK,CAAC,sCAAsC,EAAE;MAC5CC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAET,QAAQ;QAAEC;MAAS,CAAC;IAC7C,CAAC,CAAC,CACCS,IAAI,CAAEC,QAAQ,IAAK;MAClB,IAAIA,QAAQ,CAACC,EAAE,EAAE;QACf,OAAOD,QAAQ,CAACE,IAAI,CAAC,CAAC;MACxB,CAAC,MAAM;QACL,MAAM,IAAIC,KAAK,CAAC,iBAAiB,CAAC;MACpC;IACF,CAAC,CAAC,CACDJ,IAAI,CAAEK,IAAI,IAAK;MACdb,QAAQ,CAACR,eAAe,CAACqB,IAAI,CAAC,CAAC;IACjC,CAAC,CAAC,CACDC,KAAK,CAAEvB,KAAK,IAAK;MAChBS,QAAQ,CAACL,eAAe,CAACJ,KAAK,CAACwB,OAAO,CAAC,CAAC;IAC1C,CAAC,CAAC;EACN,CAAC;AACH,CAAC;AAED,eAAelB,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}