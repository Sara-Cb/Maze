{"ast":null,"code":"import { RegisterActionType } from \"../../types/registerType\";\nimport { getMe } from \"./meAction\";\nconst registerRequest = () => ({\n  type: RegisterActionType.REGISTER_REQUEST,\n  loading: true,\n  error: null\n});\nconst registerSuccess = () => ({\n  type: RegisterActionType.REGISTER_SUCCESS,\n  loading: false,\n  error: null\n});\nconst registerFailure = error => ({\n  type: RegisterActionType.REGISTER_FAILURE,\n  loading: false,\n  error: error\n});\nexport const registerReset = () => ({\n  type: RegisterActionType.REGISTER_RESET,\n  loading: false,\n  error: null\n});\nconst registerFecth = creative => {\n  return async dispatch => {\n    dispatch(registerRequest());\n    try {\n      const response = await fetch(\"http://localhost:8080/api/auth/register\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(creative)\n      });\n      if (response.status === 201) {\n        dispatch(registerSuccess());\n        getMe(data.username);\n      } else {\n        const errorText = await response.text();\n        throw new Error(errorText);\n      }\n    } catch (error) {\n      if (error instanceof Error) {\n        dispatch(registerFailure(JSON.parse(error.message).message));\n      } else {\n        dispatch(registerFailure(\"An unknown error occurred during registration\"));\n      }\n    }\n  };\n};\nexport default registerFecth;","map":{"version":3,"names":["RegisterActionType","getMe","registerRequest","type","REGISTER_REQUEST","loading","error","registerSuccess","REGISTER_SUCCESS","registerFailure","REGISTER_FAILURE","registerReset","REGISTER_RESET","registerFecth","creative","dispatch","response","fetch","method","headers","body","JSON","stringify","status","data","username","errorText","text","Error","parse","message"],"sources":["C:/Users/sarac/OneDrive/Desktop/Capstone Project/maze/src/redux/actions/registerAction.ts"],"sourcesContent":["import { Dispatch } from \"react\";\r\nimport { RegisterAction, RegisterActionType } from \"../../types/registerType\";\r\nimport { AnyAction } from \"redux\";\r\nimport { getMe } from \"./meAction\";\r\n\r\nconst registerRequest = (): RegisterAction => ({\r\n  type: RegisterActionType.REGISTER_REQUEST,\r\n  loading: true,\r\n  error: null,\r\n});\r\n\r\nconst registerSuccess = (): RegisterAction => ({\r\n  type: RegisterActionType.REGISTER_SUCCESS,\r\n  loading: false,\r\n  error: null,\r\n});\r\n\r\nconst registerFailure = (error: string): RegisterAction => ({\r\n  type: RegisterActionType.REGISTER_FAILURE,\r\n  loading: false,\r\n  error: error,\r\n});\r\n\r\nexport const registerReset = (): RegisterAction => ({\r\n  type: RegisterActionType.REGISTER_RESET,\r\n  loading: false,\r\n  error: null,\r\n});\r\n\r\nconst registerFecth = (creative: {\r\n  username: string;\r\n  email: string;\r\n  password: string;\r\n  firstname: string;\r\n  lastname: string;\r\n  stageName: string;\r\n  city: string;\r\n  state: string;\r\n  professions: string[];\r\n  skills: string[] | null;\r\n  bio: string | null;\r\n}) => {\r\n  return async (dispatch: Dispatch<AnyAction>) => {\r\n    dispatch(registerRequest());\r\n    try {\r\n      const response = await fetch(\"http://localhost:8080/api/auth/register\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(creative),\r\n      });\r\n      if (response.status === 201) {\r\n        dispatch(registerSuccess());\r\n        getMe(data.username);\r\n      } else {\r\n        const errorText = await response.text();\r\n        throw new Error(errorText);\r\n      }\r\n    } catch (error: unknown | Error) {\r\n      if (error instanceof Error) {\r\n        dispatch(registerFailure(JSON.parse(error.message).message));\r\n      } else {\r\n        dispatch(\r\n          registerFailure(\"An unknown error occurred during registration\")\r\n        );\r\n      }\r\n    }\r\n  };\r\n};\r\n\r\nexport default registerFecth;\r\n"],"mappings":"AACA,SAAyBA,kBAAkB,QAAQ,0BAA0B;AAE7E,SAASC,KAAK,QAAQ,YAAY;AAElC,MAAMC,eAAe,GAAGA,CAAA,MAAuB;EAC7CC,IAAI,EAAEH,kBAAkB,CAACI,gBAAgB;EACzCC,OAAO,EAAE,IAAI;EACbC,KAAK,EAAE;AACT,CAAC,CAAC;AAEF,MAAMC,eAAe,GAAGA,CAAA,MAAuB;EAC7CJ,IAAI,EAAEH,kBAAkB,CAACQ,gBAAgB;EACzCH,OAAO,EAAE,KAAK;EACdC,KAAK,EAAE;AACT,CAAC,CAAC;AAEF,MAAMG,eAAe,GAAIH,KAAa,KAAsB;EAC1DH,IAAI,EAAEH,kBAAkB,CAACU,gBAAgB;EACzCL,OAAO,EAAE,KAAK;EACdC,KAAK,EAAEA;AACT,CAAC,CAAC;AAEF,OAAO,MAAMK,aAAa,GAAGA,CAAA,MAAuB;EAClDR,IAAI,EAAEH,kBAAkB,CAACY,cAAc;EACvCP,OAAO,EAAE,KAAK;EACdC,KAAK,EAAE;AACT,CAAC,CAAC;AAEF,MAAMO,aAAa,GAAIC,QAYtB,IAAK;EACJ,OAAO,MAAOC,QAA6B,IAAK;IAC9CA,QAAQ,CAACb,eAAe,CAAC,CAAC,CAAC;IAC3B,IAAI;MACF,MAAMc,QAAQ,GAAG,MAAMC,KAAK,CAAC,yCAAyC,EAAE;QACtEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACR,QAAQ;MAC/B,CAAC,CAAC;MACF,IAAIE,QAAQ,CAACO,MAAM,KAAK,GAAG,EAAE;QAC3BR,QAAQ,CAACR,eAAe,CAAC,CAAC,CAAC;QAC3BN,KAAK,CAACuB,IAAI,CAACC,QAAQ,CAAC;MACtB,CAAC,MAAM;QACL,MAAMC,SAAS,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;QACvC,MAAM,IAAIC,KAAK,CAACF,SAAS,CAAC;MAC5B;IACF,CAAC,CAAC,OAAOpB,KAAsB,EAAE;MAC/B,IAAIA,KAAK,YAAYsB,KAAK,EAAE;QAC1Bb,QAAQ,CAACN,eAAe,CAACY,IAAI,CAACQ,KAAK,CAACvB,KAAK,CAACwB,OAAO,CAAC,CAACA,OAAO,CAAC,CAAC;MAC9D,CAAC,MAAM;QACLf,QAAQ,CACNN,eAAe,CAAC,+CAA+C,CACjE,CAAC;MACH;IACF;EACF,CAAC;AACH,CAAC;AAED,eAAeI,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}